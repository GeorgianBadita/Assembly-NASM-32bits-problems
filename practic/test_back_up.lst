     1                                  ;se citeste de la tatatura un nume de fisier, un car special s si un nr n, fisierul are cuv separate prin spatii
     2                                  ;sa se scrie in output.txt primele n caractere din fiecare cuvant, daca nr car < n cuvantul se va completa cu car special s
     3                                  ;input.txt mere +, n = 6 (mere++)
     4                                  bits 32 
     5                                  
     6                                  
     7                                  global start        
     8                                  
     9                                  
    10                                  extern exit, fopen, fclose, scanf, fprintf, fread, printf           
    11                                  import exit msvcrt.dll    
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  import fprintf msvcrt.dll
    15                                  import scanf msvcrt.dll
    16                                  import fread msvcrt.dll
    17                                  import printf msvcrt.dll
    18                                  
    19                                  segment data use32 class=data
    20                                      ; ...
    21                                      len equ 100
    22                                      len_fis equ 30
    23 00000000 FFFFFFFF                    descriptor_fis1 dd -1
    24 00000004 00<rept>                    nume_fisier times len_fis db 0
    25 00000022 7200                        mod_access db "r", 0
    26 00000024 7700                        mod_access1 db "w", 0
    27 00000026 257300                      fmt_read_str db "%s", 0
    28 00000029 257300                      fmt_read_char db "%s", 0
    29 0000002C 256400                      fmt_read_int db "%d", 0
    30 0000002F 45726F617265206C61-         msg_err db "Eroare la deschiderea fisierului", 0
    30 00000038 206465736368696465-
    30 00000041 726561206669736965-
    30 0000004A 72756C756900       
    31 00000050 00                          chr db 0
    32 00000051 00                          n db 0
    33 00000052 00                          buffer db 0
    34 00000053 00<rept>                    cuv times len_fis db 0
    35 00000071 FFFFFFFF                    descriptor_fis2 dd -1
    36 00000075 6F75747075742E7478-         nume_fisier2 db "output.txt", 0
    36 0000007E 7400               
    37                                  
    38                                  
    39                                  segment code use32 class=code
    40                                      start:
    41                                           
    42 00000000 68[04000000]                     push DWORD nume_fisier
    43 00000005 68[26000000]                     push DWORD fmt_read_str
    44 0000000A FF15[00000000]                   call [scanf]
    45 00000010 83C408                           add ESP, 4*2
    46                                          
    47                                           
    48 00000013 68[50000000]                     push DWORD chr
    49 00000018 68[29000000]                     push DWORD fmt_read_char
    50 0000001D FF15[00000000]                   call [scanf]
    51 00000023 83C408                           add ESP, 4*2
    52                                           
    53                                           
    54 00000026 68[51000000]                     push DWORD n
    55 0000002B 68[2C000000]                     push DWORD fmt_read_int
    56 00000030 FF15[00000000]                   call [scanf]
    57 00000036 83C408                           add ESP, 4*2
    58                                           
    59                                          
    60 00000039 68[22000000]                     push DWORD mod_access
    61 0000003E 68[04000000]                     push DWORD nume_fisier
    62 00000043 FF15[00000000]                   call [fopen]
    63 00000049 83C408                           add ESP, 4*2
    64                                           
    65 0000004C 83F800                           cmp EAX, 0
    66 0000004F 0F8401010000                     je err_
    67                                           
    68 00000055 A3[00000000]                     mov [descriptor_fis1], EAX
    69 0000005A BF[53000000]                     mov EDI, cuv
    70                                           
    71 0000005F 68[24000000]                     push DWORD mod_access1
    72 00000064 68[75000000]                     push DWORD nume_fisier2
    73 00000069 FF15[00000000]                   call [fopen]
    74 0000006F 83C408                           add ESP, 4*2
    75 00000072 A3[71000000]                     mov [descriptor_fis2], EAX
    76                                           
    77                                           bucla:
    78 00000077 FF35[00000000]                      push DWORD [descriptor_fis1]
    79 0000007D 6A01                                push DWORD 1
    80 0000007F 6A01                                push DWORD 1
    81 00000081 68[52000000]                        push DWORD buffer
    82 00000086 FF15[00000000]                      call [fread]
    83 0000008C 83C410                              add ESP, 4*4
    84 0000008F 83F800                              cmp EAX, 0
    85 00000092 0F849E000000                        je clean_up
    86                                              
    87 00000098 A0[52000000]                        mov AL, [buffer]
    88 0000009D 3C20                                cmp AL, ' '
    89 0000009F 7406                                je prt_cuv
    90 000000A1 AA                                  stosb
    91 000000A2 E98A000000                          jmp again
    92                                              prt_cuv:
    93                                                  
    94 000000A7 B800000000                              mov EAX, 0
    95 000000AC A0[51000000]                            mov AL, [n]
    96 000000B1 C680[53000000]00                        mov [cuv + EAX], BYTE 0
    97 000000B8 BE[53000000]                            mov ESI, cuv
    98 000000BD B800000000                              mov EAX, 0
    99 000000C2 A0[51000000]                            mov AL, [n]
   100 000000C7 89C1                                    mov ECX, EAX
   101 000000C9 B800000000                              mov EAX, 0
   102                                                  repet:
   103 000000CE 8A1C06                                      mov BL, [ESI + EAX]
   104 000000D1 80FB00                                      cmp BL, 0
   105 000000D4 7402                                        je put_special
   106 000000D6 EB09                                        jmp to_loop
   107                                                      put_special:
   108 000000D8 8A3D[50000000]                                  mov BH, [chr]
   109 000000DE 883C06                                          mov [ESI + EAX], BH
   110                                                      to_loop:
   111 000000E1 40                                          inc EAX
   112 000000E2 E2EA                                    loop repet
   113 000000E4 B800000000                              mov EAX, 0
   114 000000E9 A0[51000000]                            mov AL, [n]
   115 000000EE C680[53000000]20                        mov [cuv + EAX], BYTE 20h
   116 000000F5 83C001                                  add EAX, 1
   117 000000F8 C680[53000000]00                        mov [cuv + EAX], BYTE 0
   118 000000FF 68[53000000]                            push DWORD cuv
   119 00000104 FF35[71000000]                          push DWORD  [descriptor_fis2]
   120 0000010A FF15[00000000]                          call [fprintf]
   121 00000110 83C408                                  add ESP, 4*2
   122 00000113 BB00000000                              mov EBX, 0
   123 00000118 BF[53000000]                            mov EDI, cuv
   124                                                  clear:
   125 0000011D 8A83[53000000]                              mov AL, [cuv + EBX]
   126 00000123 C683[53000000]00                            mov [cuv + EBX], BYTE 0
   127 0000012A 43                                          inc EBX
   128 0000012B 3C00                                        cmp AL, 0
   129 0000012D 7402                                        je again
   130 0000012F EBEC                                        jmp clear
   131                                              
   132                                           again:   
   133 00000131 E941FFFFFF                       jmp bucla
   134                                           
   135                                           clean_up:
   136 00000136 FF35[71000000]                      push DWORD [descriptor_fis2]
   137 0000013C FF15[00000000]                      call [fclose]
   138 00000142 83C404                              add ESP, 4*1
   139                                           
   140 00000145 FF35[00000000]                      push DWORD [descriptor_fis1]
   141 0000014B FF15[00000000]                      call [fclose]
   142 00000151 83C404                              add ESP, 4*1
   143                                           
   144 00000154 EB0E                             jmp final
   145                                           err_:
   146 00000156 68[2F000000]                     push DWORD msg_err
   147 0000015B FF15[00000000]                   call [printf]
   148 00000161 83C404                           add ESP, 4*1
   149                                           final:
   150                                          
   151 00000164 6A00                            push    dword 0      
   152 00000166 FF15[00000000]                  call    [exit]       
