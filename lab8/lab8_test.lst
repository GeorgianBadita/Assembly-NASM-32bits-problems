     1                                  ;codificare cezar a unui strig citit de la tastatura
     2                                  bits 32
     3                                  
     4                                  
     5                                  global start        
     6                                  
     7                                  
     8                                  extern exit, scanf, printf              
     9                                  import exit msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 257300                      format_scan_str db "%s", 0
    15 00000003 257300                      format_print db "%s", 0
    16 00000006 257500                      format_scan_int db "%u", 0
    17                                      len equ 15
    18 00000009 00<rept>                    string times len db 0
    19 00000018 00                          key db 0
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 60                              PUSHAD  ;salvamm valorile registriilor
    24 00000001 68[09000000]                    push DWORD string       ;punem adresa string-ului 
    25 00000006 68[00000000]                    push DWORD format_scan_str ;punem formatul de citire al stringului
    26 0000000B FF15[00000000]                  call [scanf] ;apelam functia scanf
    27 00000011 83C408                          add ESP, 4*2 ;eliberam stiva
    28 00000014 61                              POPAD ;restauram valorile registriilor
    29 00000015 60                              PUSHAD ;salvamm
    30 00000016 68[18000000]                    push DWORD key ;punem adresa variabilei key
    31 0000001B 68[06000000]                    push DWORD format_scan_int ;punem pe stiva formatul de citire al unui numar intreg
    32 00000020 FF15[00000000]                  call [scanf] ;apelam functia scanf
    33 00000026 83C408                          add ESP, 4*2 ;eliberam stiva de valor
    34 00000029 61                              POPAD ;restauram
    35                                          
    36 0000002A A0[18000000]                    mov AL, [key] ;punem valoarea key in AL
    37 0000002F B400                            mov AH, 0 ;convertim fara semn AL la AX
    38 00000031 B31A                            mov BL, 26 ;punem numarul de litere din alfabetul englez in BL
    39 00000033 F6F3                            div BL ;impartim prin BL
    40 00000035 8825[18000000]                  mov [key], AH ;punem inapoi valoarea variabilei key
    41                                          
    42 0000003B BE[09000000]                    mov ESI, string ;punem in sursa sirul string
    43 00000040 BF[09000000]                    mov EDI, string ;punem in destinatie sirul string
    44 00000045 B90F000000                      mov ECX, len ;punem lungimea maxima a stringului
    45 0000004A E31B                            jecxz sf_Prg ;daca ECX e 0 sarim la sf_Prg
    46                                          repeta:
    47 0000004C AC                                  lodsb ;incarcam in AL, litera curenta
    48 0000004D 3C00                                cmp AL, 0 ;o comparam cu 0
    49 0000004F 7416                                je sf_Prg ;daca e 0, inseamna ca am terminat sirul
    50 00000051 0205[18000000]                      add AL, [key]
    51 00000057 3C7A                                cmp AL, 122
    52 00000059 7602                                jbe store
    53 0000005B 7303                                jnb store_higher
    54                                              store:
    55 0000005D AA                                      stosb
    56 0000005E E2EC                                    loop repeta
    57                                              store_higher:
    58 00000060 1C7A                                    sbb AL, 122
    59 00000062 0460                                    add AL, 96
    60 00000064 AA                                      stosb
    61 00000065 E2E5                            loop repeta
    62                                          sf_Prg:
    63                                          
    64 00000067 68[09000000]                    push DWORD string
    65 0000006C 68[03000000]                    push DWORD format_print
    66 00000071 FF15[00000000]                  call [printf]
    67 00000077 83C408                          add ESP, 4*2
    68 0000007A 6A00                            push    dword 0      
    69 0000007C FF15[00000000]                  call    [exit]      
