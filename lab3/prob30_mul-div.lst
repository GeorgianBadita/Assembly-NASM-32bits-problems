     1                                  
     2                                  ;a*b-(100-c)/(b*b)+e+x
     3                                  ;a-word; b,c-byte; e-doubleword; x-qword
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 0100                        a dw 1
    18 00000002 FE                          b db -2
    19 00000003 5A                          c db 90
    20 00000004 01000000                    e dd 1
    21 00000008 0200000000000000            x dq 2
    22 00000010 0000000000000000            rez dq 0
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 B064                        mov AL, 100 ;AL = 100
    28 00000002 2A05[03000000]              sub AL, [c] ; AL = 100 - c
    29                                      
    30 00000008 88C3                        mov Bl, AL; AL = Bl
    31 0000000A A0[02000000]                mov AL, [b]; AL = b
    32 0000000F F62D[02000000]              imul BYTE [b]; AX = AL * b = b * b
    33 00000015 6689C1                      mov CX, AX; CX = AX = b*b
    34                                      
    35 00000018 88D8                        mov AL, BL ;AL, BL
    36 0000001A 6698                        cbw ;AX 100 - c
    37 0000001C 6699                        cwd ;DX:AX = 100 - c
    38 0000001E 66F7F9                      idiv CX ;AX = (100-c)/b*b; DX = (100-c)%b*b
    39                                      
    40 00000021 6689C1                      mov CX, AX; CX = AX
    41                                      
    42 00000024 A0[02000000]                mov AL, [b]; AL = b
    43 00000029 6698                        cbw
    44 0000002B 66F72D[00000000]            imul WORD [a] ; DX:AX a*b
    45                                      
    46 00000032 6652                        push DX
    47 00000034 6650                        push AX
    48 00000036 5B                          pop EBX ; EBX = a*b
    49                                      
    50 00000037 6689C8                      mov AX, CX;  AX = CX
    51 0000003A 6699                        cwd ;DX:AX (100-c)/b*b
    52                                      
    53 0000003C 6652                        push DX
    54 0000003E 6650                        push AX
    55 00000040 58                          pop EAX
    56 00000041 29C3                        sub EBX, EAX ;a*b - (100 -c)/b*b
    57 00000043 031D[04000000]              add EBX, DWORD [e];EBX = EBX + e
    58 00000049 89D8                        mov EAX, EBX ;EAX = EBX
    59 0000004B 99                          cdq 
    60 0000004C 0305[08000000]              add EAX, DWORD [x]
    61 00000052 1315[0C000000]              adc EDX, DWORD[x + 4] ;EDX:EAX = a*b-(100-c)/(b*b)+e+x
    62                                      
    63 00000058 A3[10000000]                mov [rez], EAX; rez = EAX
    64 0000005D 8915[14000000]              mov [rez + 4], EDX; rez = EAX:EDX
    65                                          ; exit(0)
    66 00000063 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    67 00000065 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
