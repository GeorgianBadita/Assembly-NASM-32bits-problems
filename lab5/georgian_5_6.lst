     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit, printf, scanf             
     6                                  import exit msvcrt.dll  
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll   
     9                                  
    10                                  segment data use32 class=data
    11                                       
    12 00000000 EAFFFFFF                    a dd -22
    13 00000004 F8FF                        b dw -8
    14 00000006 00000000                    rez dd 0
    15 0000000A 256400                      format_scan db "%d", 0
    16 0000000D 2564206D6F64202564-         format_print db "%d mod %d = %d", 0
    16 00000016 203D20256400       
    17                                  
    18                                  
    19                                      ; Se dau doua numere natural a si b (a: dword, b: word, definite in segmentul de date). Sa se calculeze a/b si sa se afiseze restul impartirii in urmatorul format: "<a>/<b> = <cat>" Exemplu: pentru a = 23 si b =
    20                                  
    21                                  segment code use32 class=code
    22                                      start:
    23                                          
    24 00000000 66A1[00000000]                  mov AX, WORD[a] ;punem in AX WORD-ul care incepe la a
    25 00000006 668B15[02000000]                mov DX, WORD[a+2] ;punem in DX WORD-ul care incepe la a+2
    26                                           ;avem in DX:AX DWORD-ul a, idiv
    27                                  
    28                                        
    29 0000000D 66F73D[04000000]                idiv WORD[b] ;AX = DX:AX / b   DX = DX:AX % b
    30                                          
    31 00000014 6689D0                          mov AX, DX ;mutam in AX restul impartirii, pentru a-l putea converti la DWORD
    32 00000017 98                              cwde ;AX -> EAX
    33 00000018 A3[06000000]                    mov [rez], EAX         
    34 0000001D 66A1[04000000]                  mov AX, [b]
    35 00000023 98                              cwde
    36                                          
    37 00000024 FF35[06000000]                  push DWORD [rez]
    38 0000002A 50                              push DWORD EAX
    39 0000002B FF35[00000000]                  push DWORD [a]
    40 00000031 68[0D000000]                    push DWORD format_print
    41 00000036 FF15[00000000]                  call [printf]
    42 0000003C 83C410                          add ESP, 4*4
    43                                          
    44 0000003F 6A00                            push    dword 0
    45 00000041 FF15[00000000]                  call [exit]
