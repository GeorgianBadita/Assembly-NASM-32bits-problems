     1                                  ;Given two strings of words, a and b, obtain a third string c in the following way: concatenate the string of the least significant bytes from the words of the first string with the string of most significant bytes 
     2                                  
     3                                  bits 32
     4                                  
     5                                  
     6                                  global start        
     7                                  
     8                                  
     9                                  extern exit, printf              
    10                                  import exit msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  segment data use32 class=data
    13 00000000 341278569000                a dw 1234h, 5678h, 90h
    14                                      lenA equ ($ - a)/2
    15 00000006 0400CDAB10002211            b dw 4h, 0abcdh, 10h, 1122h
    16                                      lenB equ ($ - b) / 2
    17 0000000E 00<rept>                    dest times lenA + lenB db 0
    18 00000015 00<rept>                    c times lenA + lenB db 0
    19 0000001C 00000000                    saveSort dd 0
    20 00000020 00                          aux db 0
    21 00000021 257300                      format db "%s", 0
    22                                  ;c should be 34h, 78h, 90h, 00h, abh, 00h, 11h
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BE[00000000]                    mov esi, a 
    27 00000005 BB00000000                      mov ebx, 0 ;contorul pt sirul nostru
    28 0000000A FC                              cld ;parcurgem sirul de la stanga la dreapta
    29 0000000B B903000000                      mov ecx, lenA ;parcurgem elementele sirului cu un loop de lenA ori
    30                                          repeta:
    31 00000010 AC                                  lodsb ;in al vom avea octetul cel mai putin al cuvantulu din sir
    32 00000011 8883[0E000000]                      mov [dest + ebx], al
    33 00000017 43                                  inc ebx
    34 00000018 AC                                  lodsb
    35 00000019 E2F5                            loop repeta
    36                                          
    37 0000001B BE[06000000]                    mov esi, b
    38 00000020 FC                              cld 
    39 00000021 AC                              lodsb
    40 00000022 AC                              lodsb
    41 00000023 8883[0E000000]                  mov [dest + ebx], al
    42 00000029 43                              inc ebx
    43 0000002A B903000000                      mov ecx, lenB - 1 ;parcurgem de lenB ori
    44                                          repeta1:
    45 0000002F AC                                  lodsb
    46 00000030 AC                                  lodsb
    47 00000031 8883[0E000000]                      mov [dest + ebx], al
    48 00000037 43                                  inc ebx
    49 00000038 E2F5                            loop repeta1
    50                                          
    51 0000003A B907000000                      mov ECX, lenA + lenB ;punem lungimea sirului 
    52 0000003F 49                              dec ECX ;decrementam ECX
    53                                          nextScan:
    54 00000040 89CB                                mov EBX, ECX ;salvam valoarea lui ECX in EBX
    55 00000042 BE00000000                          mov ESI, 0 ;punem 0 in ESI
    56                                          nextComp:
    57 00000047 8A86[0E000000]                      mov AL, [dest + ESI] ;AL este valoarea curenta din dest
    58 0000004D 8A96[0F000000]                      mov DL, [dest + ESI + 1] ;DL este vaoarea urmatoare
    59 00000053 38D0                                cmp AL, DL ;comparam AL cu DL
    60 00000055 720C                                jc noSwap ;daca AL < DL nu facem swap
    61 00000057 8896[0E000000]                      mov [dest + ESI], DL ;facem swap
    62 0000005D 8886[0F000000]                      mov [dest + ESI + 1], AL
    63                                          noSwap:
    64 00000063 46                                  inc ESI ;trecem la elementul urmator
    65 00000064 4B                                  dec EBX ;decrementam EBX
    66 00000065 75E0                                jnz nextComp ;mergem la urmatoarea comparatie
    67 00000067 E2D7                            loop nextScan ;mergem la urmatoarea scanare
    68                                         
    69 00000069 FF35[0E000000]                  push DWORD [dest]
    70 0000006F 68[21000000]                    push DWORD format
    71 00000074 FF15[00000000]                  call [printf]
    72 0000007A 83C408                          add ESP, 4*2
    73 0000007D 6A00                            push    dword 0      
    74 0000007F FF15[00000000]                  call    [exit]      
    75                                  
    76                                          
