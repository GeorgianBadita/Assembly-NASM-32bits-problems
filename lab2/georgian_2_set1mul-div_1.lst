     1                                  ;Badita Marin-Georgian, gr. 211, 10.10.2017, problema 1 set1 inmultiri-scaderi
     2                                  ;calculul expresiei ((a+b-c)*2 + d-5)*d
     3                                  
     4                                  
     5                                  bits 32 ; assembling for the 32 bits architecture
     6                                  
     7                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     8                                  global start        
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 0D                          a db 13
    19 00000001 0A                          b db 10
    20 00000002 0A                          c db 10
    21 00000003 0C00                        d dw 12
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 A0[00000000]                    mov AL, [a] ; AL = a
    28 00000005 0205[01000000]                  add AL, [b] ; AL = AL + b = a + b
    29 0000000B 2A05[02000000]                  sub AL, [c] ; AL = AL - c = a + b - c
    30                                          
    31 00000011 B602                            mov DH, 2; DH = 2
    32 00000013 F6E6                            mul DH ; AX = AL * DH = (a + b - c)*2
    33                                          
    34 00000015 660305[03000000]                add AX, [d] ;AX = AX + d = ( (a + b - c)*2 + d) )
    35 0000001C 6683E805                        sub AX, 5 ; AX = AX - 5 = ( (a + b - c)*2 + d - 5) )
    36                                          
    37 00000020 668B15[03000000]                mov DX, [d] ; DX = d
    38 00000027 66F7E2                          mul DX ; DX:AX = DX * AX = ( (a + b - c)*2 + d - 5) )*d
    39                                          
    40 0000002A 6652                            push  DX ;se pune pe stiva partea high din double word-ul DX:AX
    41 0000002C 6650                            push  AX ;se pune pe stiva partea low din double word-ul DX:AX
    42 0000002E 58                              pop  EAX ;EAX = DX:AX = ( (a + b - c)*2 + d - 5) )*d
    43                                      
    44                                          ; exit(0)
    45 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
