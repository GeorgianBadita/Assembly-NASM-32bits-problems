     1                                  bits 32
     2                                  global start        
     3                                  
     4                                  
     5                                  extern exit, fprintf, fopen, fclose, fread, printf              
     6                                  import exit msvcrt.dll    
     7                                  import fprintf msvcrt.dll
     8                                  import fclose msvcrt.dll
     9                                  import fread msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  
    13                                  segment data use32 class=data
    14 00000000 696E7075742E747874-         nume_fisier db "input.txt", 0       ;numele fisierului
    14 00000009 00                 
    15 0000000A 722B00                      mod_access db "r+", 0               ;modul de acces r+
    16 0000000D FFFFFFFF                    descriptor_fisier dd -1             ;descriptorul fisierului
    17 00000011 00000000                    nr_car_citite dd 0                  ;numarul de caractere citite la fiecare tura
    18                                      len equ 1                           ;lungimea unui buffer de caractere citit 
    19 00000015 00                          buffer times len db 0               ;rezervarea spatiului pentru buffer
    20 00000016 00000000                    counter dd 0                        ;numarul in care vom contoriza nr de cifre
    21 0000001A 00<rept>                    rez times 100 db 0                  ;sirul rezultat
    22                                      
    23 0000007E 4E756D6172756C2064-         format_print db "Numarul de cifre pare este %d", 10, 13, 0
    23 00000087 652063696672652070-
    23 00000090 617265206573746520-
    23 00000099 25640A0D00         
    24 0000009E 416365737465612073-         format_print_1 db "Acestea sunt %s",0
    24 000000A7 756E7420257300     
    25                                          
    26                                  segment code use32 class=code
    27                                      start:
    28                                          
    29 00000000 68[0A000000]                    push DWORD mod_access           ;punem modul de acces pe stiva
    30 00000005 68[00000000]                    push DWORD nume_fisier          ;punem numele fisierului pe stiva 
    31 0000000A FF15[00000000]                  call [fopen]                    ;apelam functioa fopen
    32 00000010 83C408                          add ESP, 4*2                    ;curatam stiva de parametrii
    33                                          
    34 00000013 83F800                          cmp EAX, 0
    35 00000016 0F8490000000                    je final
    36                                          
    37 0000001C A3[0D000000]                    mov [descriptor_fisier], EAX    ;punem valoarea lui EAX in descriptor_fisier daca nu avem eroare
    38 00000021 BB00000000                      mov EBX, 0                      ;contorul de cifre
    39                                          
    40 00000026 BF[1A000000]                    mov EDI, rez                    ;punem adresa de inceput a sirului rez in sirul destinatie
    41                                          
    42                                          bucla:
    43                                              ;citim o parte (50 de caractere) din textul in fisierul deschis, folosind functia fread
    44                                              
    45 0000002B FF35[0D000000]                      push DWORD  [descriptor_fisier]
    46 00000031 6A01                                push DWORD len
    47 00000033 6A01                                push DWORD 1
    48 00000035 68[15000000]                        push DWORD buffer
    49 0000003A FF15[00000000]                      call [fread]
    50 00000040 83C410                              add ESP, 4*4
    51                                              
    52                                              ;EAX <- nr de caractere citite 
    53                                              
    54 00000043 83F800                              cmp EAX, 0
    55 00000046 7433                                je cleanup
    56 00000048 A3[11000000]                        mov [nr_car_citite], EAX
    57                                              
    58 0000004D A0[15000000]                        mov AL, [buffer]
    59 00000052 2C30                                sub AL, '0'
    60 00000054 B400                                mov AH, 0
    61 00000056 38E0                                cmp AL, AH
    62 00000058 7D02                                jge check_9
    63 0000005A EBCF                                jmp bucla
    64                                              check_9:
    65 0000005C B409                                    mov AH, 9
    66 0000005E 38E0                                    cmp AL, AH
    67 00000060 7C02                                    jnge is_dig
    68 00000062 EBC7                                    jmp bucla
    69                                                  is_dig:
    70 00000064 6698                                        cbw
    71 00000066 B202                                        mov DL, 2
    72 00000068 F6F2                                        div DL
    73 0000006A B000                                        mov AL, 0
    74 0000006C 38E0                                        cmp AL, AH
    75 0000006E 7402                                        je is_even
    76 00000070 EBB9                                        jmp bucla
    77                                                      is_even:
    78 00000072 A0[15000000]                                    mov AL, [buffer]
    79 00000077 43                                              inc EBX
    80 00000078 AA                                              stosb
    81                                              
    82 00000079 EBB0                            jmp bucla
    83                                          
    84                                          cleanup:
    85 0000007B FF35[0D000000]                      push DWORD [descriptor_fisier]
    86 00000081 FF15[00000000]                      call [fclose]
    87 00000087 83C404                              add ESP, 4*1
    88                                              
    89 0000008A 53                                  push DWORD EBX
    90 0000008B 68[7E000000]                        push DWORD format_print
    91 00000090 FF15[00000000]                      call [printf]
    92 00000096 83C408                              add ESP, 4*2
    93                                              
    94 00000099 68[1A000000]                        push DWORD rez
    95 0000009E 68[9E000000]                        push DWORD format_print_1
    96 000000A3 FF15[00000000]                      call [printf]
    97 000000A9 83C408                              add ESP, 4*2
    98                                              
    99                                          final:
   100                                          
   101 000000AC 6A00                            push    dword 0      
   102 000000AE FF15[00000000]                  call    [exit]       
