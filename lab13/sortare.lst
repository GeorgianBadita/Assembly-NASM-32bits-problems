     1                                  ;Dandu-se un sir de octeti se cere ordonarea acestuia in ordine grescatoare
     2                                  
     3                                  bits 32 
     4                                  
     5                                  
     6                                  global start        
     7                                  
     8                                  
     9                                  extern exit               
    10                                  import exit msvcrt.dll    
    11                                  
    12                                  
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 05020301090900              sir db 5, 2, 3, 1, 9, 9, 0
    16                                      len equ $-sir
    17                                  
    18                                  segment code use32 class=code
    19                                      start:
    20                                      
    21                                      
    22                                      ;for(int i = 0; i<n - 1; i++) {
    23                                      ;   for(int j = i + 1; j<n; j++) {
    24                                      ;           if(v[i] > v[j]) {
    25                                      ;               aux = v[i]
    26                                      ;               v[i] = v[j]
    27                                      ;               v[j] = aux
    28                                      ;       }
    29                                      ;   }          
    30                                      ;}
    31                                      ;
    32                                      
    33 00000000 BE[00000000]                    mov ESI, sir            ;ESI - offset de inceput pt sir
    34 00000005 BA00000000                      mov EDX, 0
    35                                          repet:
    36 0000000A 8A1C16                              mov BL, [ESI + EDX] ;in BL punem v[i] 
    37 0000000D 88D7                                mov BH, DL          ;in BH, punem i 
    38 0000000F FEC7                                inc BH              ;in BH  punem i + 1
    39 00000011 B800000000                          mov EAX, 0      ;punem 0 in EAX
    40                                              compare:
    41 00000016 B400                                    mov AH, 0       
    42 00000018 88F8                                    mov AL, BH      ;punem in AL, j
    43 0000001A 8A2406                                  mov AH, [ESI + EAX] ;punem in AL, v[j] (AL a fost convertit fara semn la EAX)
    44 0000001D 38E3                                    cmp BL, AH      ;comparam v[i], v[j]
    45 0000001F 7702                                    ja swap
    46 00000021 EB0C                                    jmp not_swap
    47                                                  swap: 
    48 00000023 88D9                                        mov CL, BL      ;in CL <- ESI + EDX aux = v[i]
    49 00000025 88E5                                        mov CH, AH      ;in CH <- ESI + EAX
    50 00000027 B400                                        mov AH, 0
    51 00000029 882C16                                      mov [ESI + EDX], CH ;v[i] = v[j]
    52 0000002C 880C06                                      mov [ESI + EAX], CL ;v[j] = aux
    53                                                  not_swap:
    54 0000002F 40                                          inc EAX         
    55 00000030 83F806                                      cmp EAX, len-1
    56 00000033 7402                                        je go_to_repet
    57 00000035 EBDF                                        jmp compare
    58                                                      
    59                                          go_to_repet:
    60 00000037 42                              inc EDX
    61 00000038 83FA06                          cmp EDX, len-1
    62 0000003B 7402                            je final
    63 0000003D EBCB                            jmp repet
    64                                          
    65                                          final:
    66                                                      
    67                                                      
    68                                                      
    69                                                      
    70                                                      
    71                                              
    72                                              
    73                                              
    74                                          
    75 0000003F 6A00                            push    dword 0      
    76 00000041 FF15[00000000]                  call    [exit]       
